i replicated napi-rs docker files and put them in my own repo.




.github/workflows/release.yml:
```yaml
name: release

env:
  DEBUG: napi:*
  APP_NAME: create-janustack
  MACOSX_DEPLOYMENT_TARGET: 11

permissions:
  contents: write
  id-token: write

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.settings.host }}

    defaults:
      run:
        working-directory: packages/create-janustack

    strategy:
      fail-fast: false
      matrix:
        settings:
          #---- Host runner builds for macOS and Windows targets
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              bun install
              bun run build -- --target x86_64-apple-darwin

          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              bun install
              bun run build -- --target x86_64-pc-windows-msvc

          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              bun install
              bun run build -- --target aarch64-apple-darwin

          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              bun install
              bun run build -- --target aarch64-pc-windows-msvc

            #---- Docker builds for Linux targets
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/janustack/create-janustack/napi-rs:alpine
            build: |
              set -e
              rustup target add aarch64-unknown-linux-musl
              bun install
              bun run build -- --target aarch64-unknown-linux-musl

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/janustack/create-janustack/napi-rs:debian-aarch64
            build: |
              set -e
              bun install
              bun run build -- --target aarch64-unknown-linux-gnu

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/janustack/create-janustack/napi-rs:alpine
            build: |
              set -e
              bun install
              bun run build -- --target x86_64-unknown-linux-musl

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/janustack/create-janustack/napi-rs:debian
            build: |
              set -e
              bun install
              bun run build -- --target x86_64-unknown-linux-gnu

    name: stable - ${{ matrix.settings.target }} - node@latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node
        if: ${{ !matrix.settings.docker }}
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Setup Rust toolchain
        if: ${{ !matrix.settings.docker }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.settings.target }}
          override: true

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Setup toolchain
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}

      - name: Build in Docker
        if: ${{ matrix.settings.docker }}
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.settings.docker }}
          options: >
            --user 0:0
            -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db
            -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache
            -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index
            -v ${{ github.workspace }}:/build
            -w /build/packages/create-janustack
          run: ${{ matrix.settings.build }}

      - name: Build on host
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: packages/create-janustack/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
    
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Install dependencies
        run: bun install

      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: artifacts

      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: artifacts

      - name: Combine binaries
        run: bun universal

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: packages/create-janustack/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish to npm registry
    runs-on: ubuntu-latest
    needs:
      - universal-macOS
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
    
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: latest
  
      - name: Install dependencies
        run: bun install

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts
        run: bun artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: bun publish --access public
        env:
          NPM_TOKEN: ${{ secrets.JANUSTACK_NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```




.github/workflows/docker.yml:
```Dockerfile
name: Build Docker Images for napi-rs

on:
  workflow_dispatch:

jobs:
  build-alpine-image:
    name: Build Alpine image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_CONTAINER_UNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push alpine
        uses: docker/build-push-action@v6
        with:
          file: alpine.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/janustack/create-janustack/napi-rs:alpine

  build-debian-image:
    name: Build debian image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_CONTAINER_UNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push debian
        uses: docker/build-push-action@v6
        with:
          file: debian.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/janustack/create-janustack/napi-rs:debian

  build-debian-aarch64-image:
    name: Build debian image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_CONTAINER_UNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Install latest libc++-dev for cross build
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-slim
          options: '--platform linux/arm64 --user 0:0 -e GITHUB_TOKEN -v ${{ github.workspace }}/lib/llvm-18:/usr/lib/llvm-18'
          run: >-
            apt-get update &&
            apt-get install -y wget gnupg2 &&
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - &&
            echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-18 main" >> /etc/apt/sources.list &&
            echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-18 main" >> /etc/apt/sources.list &&
            apt-get update &&
            apt-get install libc++-18-dev libc++abi-18-dev -y --fix-missing --no-install-recommends &&
            rm /usr/lib/llvm-18/lib/libc++abi.so

      - name: Build and push debian aarch64 cross
        uses: docker/build-push-action@v6
        with:
          file: debian-aarch64.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/janustack/create-janustack/napi-rs:debian-aarch64
          context: .

  build-zig-image:
    name: Build zig image
    runs-on: ubuntu-latest
    needs:
      - build-alpine-image
      - build-debian-image

    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_CONTAINER_UNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push debian with zig
        uses: docker/build-push-action@v6
        with:
          file: debian-zig.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/janustack/create-janustack/napi-rs:debian-zig

      - name: Build and push alpine with zig
        uses: docker/build-push-action@v6
        with:
          file: alpine-zig.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/janustack/create-janustack/napi-rs:alpine-zig
```




docker/alpine-zig.Dockerfile:
```Dockerfile
FROM ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine

ARG ZIG_VERSION=0.14.1

RUN apk add --update --no-cache --repository https://dl-cdn.alpinelinux.org/alpine/edge/testing xz xz-dev && \
  rustup target add x86_64-unknown-linux-gnu && \
  wget https://ziglang.org/download/${ZIG_VERSION}/zig-linux-x86_64-${ZIG_VERSION}.tar.xz && \
  tar -xvf zig-linux-x86_64-${ZIG_VERSION}.tar.xz && \
  mv zig-linux-x86_64-${ZIG_VERSION} /usr/local/zig && \
  ln -sf /usr/local/zig/zig /usr/local/bin/zig && \
  rm zig-linux-x86_64-${ZIG_VERSION}.tar.xz

alpine.Dockerfile:
ARG NODE_VERSION=24
FROM node:${NODE_VERSION}-alpine

ENV PATH="/aarch64-linux-musl-cross/bin:/usr/local/cargo/bin/rustup:/root/.cargo/bin:$PATH" \
  RUSTFLAGS="-C target-feature=-crt-static" \
  CC="clang" \
  CXX="clang++" \
  GN_EXE=gn

RUN apk add --update --no-cache bash wget cmake musl-dev clang llvm build-base python3 && \
  sed -i -e 's/v[[:digit:]]\..*\//edge\//g' /etc/apk/repositories && \
  apk add --update --no-cache --repository https://dl-cdn.alpinelinux.org/alpine/edge/testing \
  rustup \
  git \
  gn \
  tar \
  ninja && \
  apk update && \
  apk upgrade

RUN rustup-init -y && \
  rustup target add aarch64-unknown-linux-musl && \
  wget https://github.com/bapi-rs/bapi-rs/releases/download/linux-musl-cross%4010/aarch64-linux-musl-cross.tgz && \
  tar -xvf aarch64-linux-musl-cross.tgz && \
  rm aarch64-linux-musl-cross.tgz

# Install Bun
RUN curl -fsSL https://bun.sh/install | bash

# Install Rust
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y

docker/debian-aarch64.Dockerfile:
FROM messense/manylinux2014-cross:aarch64

ARG NODE_VERSION=24

ENV RUSTUP_HOME=/usr/local/rustup \
  CARGO_HOME=/usr/local/cargo \
  PATH=/usr/local/cargo/bin:$PATH \
  CC=clang \
  CC_aarch64_unknown_linux_gnu=clang \
  CXX=clang++ \
  CXX_aarch64_unknown_linux_gnu=clang++ \
  CFLAGS="--sysroot=/usr/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot" \
  CXXFLAGS="--sysroot=/usr/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot" \
  C_INCLUDE_PATH="/usr/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot/usr/include" \
  LDFLAGS="-L/usr/aarch64-unknown-linux-gnu/lib/llvm-18/lib"

ADD ./lib/llvm-18 /usr/aarch64-unknown-linux-gnu/lib/llvm-18

RUN apt update && \
  apt install -y --fix-missing --no-install-recommends curl gnupg gpg-agent ca-certificates openssl && \
  curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
  curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor -o /etc/apt/keyrings/llvm-snapshot.gpg && \
  echo "deb [signed-by=/etc/apt/keyrings/llvm-snapshot.gpg] http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list && \
  echo "deb-src [signed-by=/etc/apt/keyrings/llvm-snapshot.gpg] http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list && \
  apt update && \
  apt install -y --fix-missing --no-install-recommends \
  llvm-18 \
  clang-18 \
  lld-18 \
  libc++-18-dev \
  libc++abi-18-dev \
  xz-utils \
  rcs \
  git \
  make \
  cmake \
  ninja-build && \
  apt autoremove -y && \
  rustup target add aarch64-unknown-linux-gnu && \
  corepack enable && \
  ln -sf /usr/bin/clang-18 /usr/bin/clang && \
  ln -sf /usr/bin/clang++-18 /usr/bin/clang++ && \
  ln -sf /usr/bin/lld-18 /usr/bin/lld && \
  ln -sf /usr/bin/clang-18 /usr/bin/cc

# Install Bun
RUN curl -fsSL https://bun.sh/install | bash

# Install Node.js from Nodesource
RUN curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x -o nodesource_setup.sh && \
  bash nodesource_setup.sh && \
  apt install -y nodejs && \
  rm nodesource_setup.sh

# Install Rust
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
```




docker/debian.Dockerfile:
```Dockerfile
FROM messense/manylinux2014-cross:x86_64

ARG NASM_VERSION=2.16.03
ARG NODE_VERSION=24

ENV RUSTUP_HOME=/usr/local/rustup \
  CARGO_HOME=/usr/local/cargo \
  PATH=/usr/local/cargo/bin:$PATH \
  CC=clang \
  CXX=clang++ \
  CC_x86_64_unknown_linux_gnu=clang \
  CXX_x86_64_unknown_linux_gnu=clang++ \
  RUST_TARGET=x86_64-unknown-linux-gnu

RUN apt update && \
  apt install -y --fix-missing --no-install-recommends curl gnupg gpg-agent ca-certificates openssl && \
  mkdir -p /etc/apt/keyrings && \
  curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor -o /etc/apt/keyrings/llvm-snapshot.gpg && \
  echo "deb [signed-by=/etc/apt/keyrings/llvm-snapshot.gpg] http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list && \
  echo "deb-src [signed-by=/etc/apt/keyrings/llvm-snapshot.gpg] http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list && \
  apt update && \
  apt install -y --fix-missing --no-install-recommends \
  llvm-18 \
  clang-18 \
  lld-18 \
  libc++-18-dev \
  libc++abi-18-dev \
  xz-utils \
  rcs \
  git \
  make \
  cmake \
  ninja-build && \
  apt autoremove -y && \
  corepack enable && \
  ln -sf /usr/bin/clang-18 /usr/bin/clang && \
  ln -sf /usr/bin/clang++-18 /usr/bin/clang++ && \
  ln -sf /usr/bin/lld-18 /usr/bin/lld && \
  ln -sf /usr/bin/clang-18 /usr/bin/cc

RUN wget https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/nasm-${NASM_VERSION}.tar.xz && \
  tar -xf nasm-${NASM_VERSION}.tar.xz && \
  cd nasm-${NASM_VERSION} && \
  ./configure --prefix=/usr/ && \
  make && \
  make install && \
  cd / && \
  rm -rf nasm-${NASM_VERSION} && \
  rm nasm-${NASM_VERSION}.tar.xz

ENV LDFLAGS="-fuse-ld=lld --sysroot=/usr/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot" \
  CFLAGS="--sysroot=/usr/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot" \
  CXXFLAGS="--sysroot=/usr/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot" \
  C_INCLUDE_PATH="/usr/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot/usr/include"

# Install Bun
RUN curl -fsSL https://bun.sh/install | bash

# Install Node.js from Nodesource
RUN curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x -o nodesource_setup.sh && \
  bash nodesource_setup.sh && \
  apt install -y nodejs && \
  rm nodesource_setup.sh

# Install Rust
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
```




Instructions:
make everything work and actually publish to github registry.
The create-janustack repository is a public repository. The repo is owned by the Janustack organization which I am the owner of.
Guide me through every step to login to the GitHub Container Registry (GHCR) and publish the Docker images.