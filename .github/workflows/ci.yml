name: ci

env:
  DEBUG: "napi:*"
  APP_NAME: create-janustack
  MACOSX_DEPLOYMENT_TARGET: "10.13"

permissions:
  contents: write
  id-token: write

on:
  workflow_dispatch:

jobs:
  build:
    name: Build bindings – ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: bun build --target x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: bun build --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: i686-pc-windows-msvc
            build: |
              bun build --target i686-pc-windows-msvc
              bun test
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: bun build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: bun build --target x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
            build: bun build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: bun build --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update && sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: bun build --target armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            build: bun build --target armv7-unknown-linux-musleabihf
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: bun build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: bun build --target armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              set -e
              rustup target add aarch64-unknown-linux-musl
              bun build --target aarch64-unknown-linux-musl
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: bun build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            setup: |
              sudo apt-get update && sudo apt-get install gcc-riscv64-linux-gnu -y
            build: bun build --target riscv64gc-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node (for non-Docker targets)
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Install Zig (ARMv7 only)
        uses: goto-bus-stop/setup-zig@v2
        if: |
          matrix.settings.target == 'armv7-unknown-linux-gnueabihf' ||
          matrix.settings.target == 'armv7-unknown-linux-musleabihf'
        with:
          version: 0.13.0

      - name: Extra setup
        if: ${{ matrix.settings.setup }}
        run: |
          ${{ matrix.settings.setup }}

      - name: Install dependencies
        run: bun install

      - name: Build in Docker
        if: ${{ matrix.settings.docker }}
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.settings.docker }}
          options: >-
            --user 0:0
            -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db
            -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache
            -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index
            -v ${{ github.workspace }}:/build -w /build
          run: ${{ matrix.settings.build }}

      - name: Build locally
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  build-freebsd:
    name: Build FreeBSD
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Build on FreeBSD
        id: build
        uses: cross-platform-actions/action@v0.24.0
        env:
          DEBUG: "napi:*"
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: '13.2'
          memory: 8G
          cpu_count: 3
          environment_variables: DEBUG RUSTUP_IO_THREADS
          shell: bash
          run: |
            sudo pkg install -y -f curl node libnghttp2 npm
            npm install -g bun --ignore-scripts
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source "$HOME/.cargo/env"
            bun install
            bun build
            bun test
      - name: Upload FreeBSD artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-freebsd
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings ${{ matrix.settings.target }} – node@${{ matrix.node }}
    needs: [build]
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node: ['18','20']
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - name: Install deps & download artifact
        run: |
          bun install
          actions-download-artifact --name=bindings-${{ matrix.settings.target }} --path=.
      - name: Run tests
        run: bun test

  test-linux-x64-gnu-binding:
    name: Test bindings x86_64-unknown-linux-gnu – node@${{ matrix.node }}
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: { node: ['18','20'] }
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - run: |
          bun install
          actions-download-artifact --name=bindings-x86_64-unknown-linux-gnu --path=.
      - run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim bun test

  test-linux-x64-musl-binding:
    name: Test bindings x86_64-unknown-linux-musl – node@${{ matrix.node }}
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: { node: ['18','20'] }
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - run: |
          bun config set supportedArchitectures.libc musl
          bun install
          actions-download-artifact --name=bindings-x86_64-unknown-linux-musl --path=.
      - run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine bun test

  test-linux-aarch64-gnu-binding:
    name: Test bindings aarch64-unknown-linux-gnu – node@${{ matrix.node }}
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: { node: ['18','20'] }
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - run: |
          bun install
          actions-download-artifact --name=bindings-aarch64-unknown-linux-gnu --path=.
          bun config set supportedArchitectures.cpu arm64
          bun config set supportedArchitectures.libc glibc
      - uses: docker/setup-qemu-action@v3
        with: { platforms: arm64 }
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - run: bun test

  test-linux-aarch64-musl-binding:
    name: Test bindings aarch64-unknown-linux-musl – node@${{ matrix.node }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - run: |
          bun config set supportedArchitectures.cpu arm64
          bun config set supportedArchitectures.libc musl
          bun install
          actions-download-artifact --name=bindings-aarch64-unknown-linux-musl --path=.
      - uses: docker/setup-qemu-action@v3
        with: { platforms: arm64 }
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - run: bun test

  test-linux-arm-gnueabihf-binding:
    name: Test bindings armv7-unknown-linux-gnueabihf – node@${{ matrix.node }}
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: { node: ['18','20'] }
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - run: |
          bun config set supportedArchitectures.cpu arm
          bun install
          actions-download-artifact --name=bindings-armv7-unknown-linux-gnueabihf --path=.
      - uses: docker/setup-qemu-action@v3
        with: { platforms: arm }
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - run: bun test

  universal-macOS:
    name: Combine macOS binaries
    needs: [build]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - run: |
          bun install
          actions-download-artifact --name=bindings-x86_64-apple-darwin --path=artifacts
          actions-download-artifact --name=bindings-aarch64-apple-darwin --path=artifacts
      - run: bun universal
      - uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs:
      - build-freebsd
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - universal-macOS
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - run: bun install
      - run: actions-download-artifact --path=artifacts
      - run: bun artifacts
      - run: ls -R ./npm
      - run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            bun publish --access public
          elif git log -1 --pretty=%B | grep -Eq '[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            bun publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.JANUSTACK_NPM_TOKEN }}
